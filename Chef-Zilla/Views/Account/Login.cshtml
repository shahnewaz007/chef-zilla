@using Chef_Zilla.Models
@model LoginViewModel
@{
    ViewBag.Title = "Log in";
}

<div class="container-fluid">
    <div class="row fixed-top">
        <div class="col-md-3 d-none d-md-block ">
            <img style="width: 70%" class="img-fluid" src="~/Images/Group 2.png" alt="">
        </div>
        <div class="col-md-3"></div>
        <div class="col-md-3"></div>
        <div class="col-md-3"></div>
    </div>
    <br>
    <br>
    <div class="row d-flex align-items-center mt-1">
        <div class="col-lg-5 col-md-6 col-sm-8 offset-sm-2 offset-md-0 offset-lg-0 text-center animated pulse">
            <img class="img-fluid" src="~/Images/login.png" alt="">
        </div>
        <div class="col-lg-7 col-md-6 col-sm-12 offset-lg-0 offset-md-0">
            <div class="container-fluid">
                <div class="row text-center">
                    <div class="col-8 offset-2 animated fadeIn">
                        <h1>Member Login</h1>
                    </div>
                </div>
                @if (TempData["message"] != null)
                {
                    <div id="infoValidationSummary" class="modal" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Modal title</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <p>@TempData["message"]</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    if (ViewData.ModelState.Keys.Any(k => ViewData.ModelState[k].Errors.Any()))
                    {
                        <div class="row">
                            <div class="col-md-6 col-sm-8 offset-sm-2 offset-md-3 col-8 offset-2 mt-1 animated bounceIn">
                                <div class="alert alert-warning alert-dismissible show" role="alert">
                                    @Html.ValidationSummary(true, "")
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="md-form col-md-6 col-sm-8 offset-sm-2 offset-md-3 col-8 offset-2 mt-1 animated bounceIn">
                            @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control", @style = "border-bottom: 1.2px solid #b3b3b3; " } })
                            @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "ml-3 phoneNumberLabel", @style = "color: #b30000;" })
                        </div>
                        <div class="md-form col-md-6 col-sm-8 offset-sm-2 offset-md-3 col-8 offset-2 mt-n2 animated bounceIn">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @style = "border-bottom: 1.2px solid #b3b3b3; " } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "ml-3 passwordLabel", @style = "color: #b30000;" })
                        </div>
                    </div>
                    <div class="row mt-n3">
                        <div class="col-md-12 animated pulse">
                            <a href="@Url.Action("ForgotPassword", "Account")"><p style="text-align:center; color:darkblue ">Forgot Password?</p></a>
                        </div>
                    </div>
                    <div class="row text-center my-1">
                        <div class="col-md-12 animated fadeIn">
                            <input type="submit" value="Login" class="buttonCss text-center" />
                        </div>
                        <div class="col-md-12 animated fadeIn">
                            <p class="color my-1">Don't you have an account ?</p>
                            @Html.ActionLink("Register", "Register", "Account", routeValues: null, htmlAttributes: new { @class = "btn buttonCss" })
                        </div>
                    </div>
                }
                <br>
                <br>
            </div>
        </div>
    </div>

    <div class="row fixed-bottom ">
        <div class="container-fluid">
            <div class="row no-gutters d-none d-md-block">
                <div class="col-md-12">
                    <img style="width: 15%;" class="float-right" src="~/Images/Group 1.png" alt="">
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#Number").focus(function () {
                $(".phoneNumberLabel").animate({ "top": '-25px' }, 100);
            });
            
            $("#Password").focus(function () {
                $(".passwordLabel").animate({ "top": '-25px' }, 100);
            });

            $('#Number').blur(function () {
                if (!$(this).val()) {
                    $(".phoneNumberLabel").animate({ "top": '5px' }, 100);
                }
            })

            $('#Password').blur(function () {
                if (!$(this).val()) {
                    $(".passwordLabel").animate({ "top": '5px' }, 100);
                }
            })

            if (document.getElementById("Number").value) {
                $(".phoneNumberLabel").animate({ "top": '-25px' }, 100);
            }

            if (document.getElementById("Password").value) {
                $(".phoneNumberLabel").animate({ "top": '-25px' }, 100);
            }

            if ("@TempData["message"]" != null) {
                $('#infoValidationSummary').modal('show');
            }
        });
    </script>
    @Styles.Render("~/Animation/css")
    @Scripts.Render("~/bundles/jqueryval")
}